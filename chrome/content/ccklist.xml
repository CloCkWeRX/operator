<?xml version="1.0"?>
<!DOCTYPE ccklist SYSTEM "chrome://operator/locale/ccklist.dtd">
<bindings xmlns="http://www.mozilla.org/xbl"
         xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <binding id="ccklist">
    <content>
      <xul:hbox flex="1">
        <xul:vbox flex="1">
          <xul:listbox flex="1" anonid="listbox">
          </xul:listbox>
        </xul:vbox>
        <xul:vbox anonid="button_vbox">
          <xul:button label="&newButton.label;" collapsed="true" accesskey="&newButton.accesskey;" anonid="new" type="new"/>
          <xul:button label="&editButton.label;" collapsed="true" accesskey="&editButton.accesskey;" anonid="edit" type="edit"/>
          <xul:button label="&deleteButton.label;" collapsed="true" accesskey="&deleteButton.accesskey;" anonid="delete" type="delete"/>
          <xul:button label="&moveUpButton.label;" collapsed="true" accesskey="&moveUpButton.accesskey;" anonid="moveup" type="moveup"/>
          <xul:button label="&moveDownButton.label;" collapsed="true" accesskey="&moveDownButton.accesskey;" anonid="movedown" type="movedown"/>
          <xul:spacer flex="1"/>
        </xul:vbox>
        </xul:hbox>
    </content>
    <implementation>
      <constructor>
        <![CDATA[
          <!-- Get the list of buttons and uncollapse them -->
          var buttons = this.getAttribute("buttons");
          var i;
          if (buttons) {
            var buttonlist = buttons.split(",");
            for (i = 0; i< buttonlist.length; i++) { 
              document.getAnonymousElementByAttribute(this, "anonid", buttonlist[i]).collapsed = false;
            }
          } else {
            <!-- If there was no list, uncollapse them all -->
            var vbox = document.getAnonymousElementByAttribute(this, "anonid", "button_vbox");
            for (i = 0; i< vbox.childNodes.length-1; i++) { 
              vbox.childNodes[i].collapsed = false;
            }
          }
          this._enableDisableButtons();
        ]]>
      </constructor>
      <method name="clear">
        <body>
          <![CDATA[
            var listbox = document.getAnonymousElementByAttribute(this, "anonid", "listbox");
            while(listbox.getRowCount() != 0) {
              listbox.removeItemAt(0);
            }
          ]]>
        </body>
      </method>
      <method name="getRowCount">
        <body>
          <![CDATA[
            return document.getAnonymousElementByAttribute(this, "anonid", "listbox").getRowCount();
          ]]>
        </body>
      </method>
      <method name="getItemAtIndex">
        <parameter name="index"/>
        <body>
          <![CDATA[
            return document.getAnonymousElementByAttribute(this, "anonid", "listbox").getItemAtIndex(index);
          ]]>
        </body>
      </method>
      <method name="appendItem">
        <parameter name="label"/>
        <parameter name="value"/>
        <body>
          <![CDATA[
            var listboxitem = document.getAnonymousElementByAttribute(this, "anonid", "listbox").appendItem(label, value);
            listboxitem.cck = new Array();
            this._enableDisableButtons();
            return listboxitem;
          ]]>
        </body>
      </method>
      <method name="_enableDisableButtons">
        <body>
          <![CDATA[
            var listbox = document.getAnonymousElementByAttribute(this, "anonid", "listbox");
            var vbox = document.getAnonymousElementByAttribute(this, "anonid", "button_vbox");
            for (i = 0; i< vbox.childNodes.length-1; i++) {
              vbox.childNodes[i].disabled = false;
            }
            var button;
            if (listbox.selectedIndex == -1) {
              document.getAnonymousElementByAttribute(this, "anonid", "edit").disabled = true;
              document.getAnonymousElementByAttribute(this, "anonid", "delete").disabled = true;
              document.getAnonymousElementByAttribute(this, "anonid", "moveup").disabled = true;
              document.getAnonymousElementByAttribute(this, "anonid", "movedown").disabled = true;
            } else if (listbox.selectedIndex == 0) {
              document.getAnonymousElementByAttribute(this, "anonid", "moveup").disabled = true;
            } else if (listbox.selectedIndex == listbox.getRowCount()-1) {
              document.getAnonymousElementByAttribute(this, "anonid", "movedown").disabled = true;
            }
            if (this.getAttribute("disablenew")) {
              document.getAnonymousElementByAttribute(this, "anonid", "new").disabled = window[this.getAttribute("disablenew")]();
            }
          ]]>
        </body>
      </method>
      <property name="selectedItem"
          onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'listbox').selectedItem;"
          onset="document.getAnonymousElementByAttribute(this, 'anonid', 'listbox').selectedItem = val;"/>      
    </implementation>
    <handlers>
      <handler event="select">
        this._enableDisableButtons();
      </handler>
      <handler event="dblclick">
        if (event.originalTarget.tagName == "listitem")
          window[this.getAttribute("edit")]();
      </handler>
      <handler event="command">
        if (event.originalTarget.type == "delete") {
            var dodelete = true;
            if (this.getAttribute("ondelete")) {
              dodelete = window[this.getAttribute("ondelete")]();
            }
            if (dodelete) {
              var listbox = document.getAnonymousElementByAttribute(this, 'anonid', 'listbox');
              listbox.removeItemAt(listbox.selectedIndex);
            }
        } else if ((event.originalTarget.type == "moveup") || (event.originalTarget.type == "movedown")) {
          var listbox = document.getAnonymousElementByAttribute(this, 'anonid', 'listbox');
          var listitem = listbox.selectedItem;
          var index;
          if (event.originalTarget.type == "moveup")
            index = listbox.selectedIndex-1;
          else
            index = listbox.selectedIndex+2;
          var newlistitem;
          if (index >= listbox.getRowCount()) {
            newlistitem = listbox.appendItem(listitem.label , listitem.value);
          } else {
            newlistitem = listbox.insertItemAt(index, listitem.label , listitem.value);
          }
          newlistitem.cck = listitem.cck;
          if (listitem.getAttribute("class") == "listitem-iconic") {
            newlistitem.setAttribute("class", "listitem-iconic");
            newlistitem.setAttribute("image", listitem.getAttribute("image"));
          }
          listbox.removeItemAt(listbox.selectedIndex);
          listbox.selectItem(newlistitem);
          window[this.getAttribute("on" + event.originalTarget.type)]();
        } else {
          window[this.getAttribute(event.originalTarget.type)]();
          window[this.getAttribute("on" + event.originalTarget.type)]();
        }
        this._enableDisableButtons();
      </handler>
      <handler event="keypress" keycode="VK_DELETE">
        if (event.originalTarget.tagName == "xul:listbox") {
          var dodelete = true;
          if (this.getAttribute("ondelete")) {
            dodelete = window[this.getAttribute("ondelete")]();
          }
          if (dodelete) {
            var listbox=document.getAnonymousNodes(this)[0].childNodes[0].childNodes[0];
            listbox.removeItemAt(listbox.selectedIndex);
            this._enableDisableButtons();
          }
        }
      </handler>
      
    </handlers>
  </binding>
</bindings>
